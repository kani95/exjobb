// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Ping.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Ping.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define Ping_max_cdr_typesize 36ULL;
#define Ping_max_key_cdr_typesize 0ULL;

Ping::Ping()
{
    // long m_filler
    memset(&m_filler, 0, (7) * 4);
    // long m_time
    m_time = 0;

}

Ping::~Ping()
{


}

Ping::Ping(
        const Ping& x)
{
    m_filler = x.m_filler;
    m_time = x.m_time;
}

Ping::Ping(
        Ping&& x) noexcept 
{
    m_filler = std::move(x.m_filler);
    m_time = x.m_time;
}

Ping& Ping::operator =(
        const Ping& x)
{

    m_filler = x.m_filler;
    m_time = x.m_time;

    return *this;
}

Ping& Ping::operator =(
        Ping&& x) noexcept
{

    m_filler = std::move(x.m_filler);
    m_time = x.m_time;

    return *this;
}

bool Ping::operator ==(
        const Ping& x) const
{

    return (m_filler == x.m_filler && m_time == x.m_time);
}

bool Ping::operator !=(
        const Ping& x) const
{
    return !(*this == x);
}

size_t Ping::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Ping_max_cdr_typesize;
}

size_t Ping::getCdrSerializedSize(
        const Ping& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    if ((7) > 0)
    {
        current_alignment += ((7) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Ping::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_filler;

    scdr << m_time;

}

void Ping::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_filler;

    dcdr >> m_time;
}

/*!
 * @brief This function copies the value in member filler
 * @param _filler New value to be copied in member filler
 */
void Ping::filler(
        const std::array<int32_t, 7>& _filler)
{
    m_filler = _filler;
}

/*!
 * @brief This function moves the value in member filler
 * @param _filler New value to be moved in member filler
 */
void Ping::filler(
        std::array<int32_t, 7>&& _filler)
{
    m_filler = std::move(_filler);
}

/*!
 * @brief This function returns a constant reference to member filler
 * @return Constant reference to member filler
 */
const std::array<int32_t, 7>& Ping::filler() const
{
    return m_filler;
}

/*!
 * @brief This function returns a reference to member filler
 * @return Reference to member filler
 */
std::array<int32_t, 7>& Ping::filler()
{
    return m_filler;
}
/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void Ping::time(
        int32_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
int32_t Ping::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
int32_t& Ping::time()
{
    return m_time;
}



size_t Ping::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Ping_max_key_cdr_typesize;
}

bool Ping::isKeyDefined()
{
    return false;
}

void Ping::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
